// Generated by gencpp from file plumbing_apis/Msg01.msg
// DO NOT EDIT!


#ifndef PLUMBING_APIS_MESSAGE_MSG01_H
#define PLUMBING_APIS_MESSAGE_MSG01_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plumbing_apis
{
template <class ContainerAllocator>
struct Msg01_
{
  typedef Msg01_<ContainerAllocator> Type;

  Msg01_()
    : IntMsg01(0)  {
    }
  Msg01_(const ContainerAllocator& _alloc)
    : IntMsg01(0)  {
  (void)_alloc;
    }



   typedef int32_t _IntMsg01_type;
  _IntMsg01_type IntMsg01;





  typedef boost::shared_ptr< ::plumbing_apis::Msg01_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plumbing_apis::Msg01_<ContainerAllocator> const> ConstPtr;

}; // struct Msg01_

typedef ::plumbing_apis::Msg01_<std::allocator<void> > Msg01;

typedef boost::shared_ptr< ::plumbing_apis::Msg01 > Msg01Ptr;
typedef boost::shared_ptr< ::plumbing_apis::Msg01 const> Msg01ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plumbing_apis::Msg01_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plumbing_apis::Msg01_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plumbing_apis::Msg01_<ContainerAllocator1> & lhs, const ::plumbing_apis::Msg01_<ContainerAllocator2> & rhs)
{
  return lhs.IntMsg01 == rhs.IntMsg01;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plumbing_apis::Msg01_<ContainerAllocator1> & lhs, const ::plumbing_apis::Msg01_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plumbing_apis

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plumbing_apis::Msg01_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plumbing_apis::Msg01_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plumbing_apis::Msg01_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plumbing_apis::Msg01_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plumbing_apis::Msg01_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plumbing_apis::Msg01_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plumbing_apis::Msg01_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea9a3e4be6d6b607a1aa1fd01d384964";
  }

  static const char* value(const ::plumbing_apis::Msg01_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea9a3e4be6d6b607ULL;
  static const uint64_t static_value2 = 0xa1aa1fd01d384964ULL;
};

template<class ContainerAllocator>
struct DataType< ::plumbing_apis::Msg01_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plumbing_apis/Msg01";
  }

  static const char* value(const ::plumbing_apis::Msg01_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plumbing_apis::Msg01_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 IntMsg01\n"
;
  }

  static const char* value(const ::plumbing_apis::Msg01_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plumbing_apis::Msg01_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.IntMsg01);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Msg01_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plumbing_apis::Msg01_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plumbing_apis::Msg01_<ContainerAllocator>& v)
  {
    s << indent << "IntMsg01: ";
    Printer<int32_t>::stream(s, indent + "  ", v.IntMsg01);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLUMBING_APIS_MESSAGE_MSG01_H
