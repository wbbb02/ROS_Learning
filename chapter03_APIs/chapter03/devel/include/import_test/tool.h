// Generated by gencpp from file import_test/tool.msg
// DO NOT EDIT!


#ifndef IMPORT_TEST_MESSAGE_TOOL_H
#define IMPORT_TEST_MESSAGE_TOOL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace import_test
{
template <class ContainerAllocator>
struct tool_
{
  typedef tool_<ContainerAllocator> Type;

  tool_()
    : IntMsg01(0)  {
    }
  tool_(const ContainerAllocator& _alloc)
    : IntMsg01(0)  {
  (void)_alloc;
    }



   typedef int32_t _IntMsg01_type;
  _IntMsg01_type IntMsg01;





  typedef boost::shared_ptr< ::import_test::tool_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::import_test::tool_<ContainerAllocator> const> ConstPtr;

}; // struct tool_

typedef ::import_test::tool_<std::allocator<void> > tool;

typedef boost::shared_ptr< ::import_test::tool > toolPtr;
typedef boost::shared_ptr< ::import_test::tool const> toolConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::import_test::tool_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::import_test::tool_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::import_test::tool_<ContainerAllocator1> & lhs, const ::import_test::tool_<ContainerAllocator2> & rhs)
{
  return lhs.IntMsg01 == rhs.IntMsg01;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::import_test::tool_<ContainerAllocator1> & lhs, const ::import_test::tool_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace import_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::import_test::tool_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::import_test::tool_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::import_test::tool_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::import_test::tool_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::import_test::tool_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::import_test::tool_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::import_test::tool_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea9a3e4be6d6b607a1aa1fd01d384964";
  }

  static const char* value(const ::import_test::tool_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea9a3e4be6d6b607ULL;
  static const uint64_t static_value2 = 0xa1aa1fd01d384964ULL;
};

template<class ContainerAllocator>
struct DataType< ::import_test::tool_<ContainerAllocator> >
{
  static const char* value()
  {
    return "import_test/tool";
  }

  static const char* value(const ::import_test::tool_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::import_test::tool_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 IntMsg01\n"
;
  }

  static const char* value(const ::import_test::tool_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::import_test::tool_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.IntMsg01);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct tool_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::import_test::tool_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::import_test::tool_<ContainerAllocator>& v)
  {
    s << indent << "IntMsg01: ";
    Printer<int32_t>::stream(s, indent + "  ", v.IntMsg01);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMPORT_TEST_MESSAGE_TOOL_H
